{"version":3,"sources":["../src/MutableString.js"],"names":[],"mappings":"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","file":"MutableString.js","sourcesContent":["/* global suite, test */\n/* eslint yoda:0 */\n\nimport 'core-js';\nimport assert from 'proclaim';\nimport MutableString from '../../lib/MutableString';\n\nconst strings = [\n    '',\n    'hello',\n    '\\n',\n    'hello\\n',\n];\n\ntest('trim', () => {\n    for (let string of strings) {\n        let mutableString = new MutableString(string);\n        mutableString.trim();\n        assert.strictEqual(mutableString.string, string.trim());\n    }\n});\n\ntest('match', () => {\n    assert.deepEqual(\n        'foobar'.match(new MutableString('foo')),\n        'foobar'.match('foo')\n    );\n\n    assert.deepEqual(\n        new MutableString('foobar').match('foo'),\n        'foobar'.match('foo')\n    );\n});\n\ntest('replace', () => {\n    assert.strictEqual(\n        'foobar'.replace('bar', 'foo'),\n        'foobar'.replace(new MutableString('bar'), new MutableString('foo'))\n    );\n\n    const mutableString = new MutableString('foobar');\n    mutableString.replace('bar', 'foo');\n    assert.strictEqual(mutableString.toString(), 'foofoo');\n});\n\ntest('includes', () => {\n    assert.isTrue('foobar'.includes('bar'));\n    assert.isTrue('foobar'.includes(new MutableString('bar')));\n    assert.isTrue(new MutableString('foobar').includes('bar'));\n\n    assert.isFalse('foobar'.includes('foooo'));\n    assert.isFalse('foobar'.includes(new MutableString('foooo')));\n    assert.isFalse(new MutableString('foobar').includes('foooo'));\n});\n\ntest('operations', () => {\n    assert.isTrue('a' < 'b');\n    assert.isTrue('a' < new MutableString('b'));\n    assert.isTrue(new MutableString('a') < 'b');\n\n    assert.isFalse('a' > 'b');\n    assert.isFalse('a' > new MutableString('b'));\n    assert.isFalse(new MutableString('a') > 'b');\n\n    assert.strictEqual(new MutableString('a') + 'b', 'a' + 'b');\n    assert.strictEqual('a' + new MutableString('b'), 'a' + 'b');\n});\n\ntest('iterator', () => {\n    const letters = [];\n    const mutableString = new MutableString('abc');\n\n    for (let letter of mutableString) {\n        letters.push(letter);\n    }\n\n    assert.strictEqual(letters.length, 3);\n    assert.deepEqual(letters, ['a', 'b', 'c']);\n});\n"]}